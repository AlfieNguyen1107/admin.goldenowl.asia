version: 2.1

jobs:
  build:
    working_directory: ~/admin-goldenowl-asia
    docker:
      - image: circleci/ruby:2.6.8-stretch-node-browsers-legacy
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_PATH: vendor/bundle
          BUNDLE_RETRY: 3
          BUNDLER_VERSION: 2.1.4
          RAILS_ENV: test
          CC_TEST_REPORTER_ID: $CC_TEST_REPORTER_ID
      - image: circleci/postgres:11.6
    steps:
      - checkout

      # Restore bundle cache
      - restore_cache:
          key: admin-goldenowl-asia-{{ checksum "Gemfile.lock" }}

      - run:
          name: Configure bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      # Yarn install
      - run:
          name: Yarn install
          command: yarn install

      # Bundle install
      - run:
          name: Bundle install
          command: bundle install

      # Store bundle cache
      - save_cache:
          key: admin-goldenowl-asia-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Config database
      - run:
          name: Config database
          environment:
            - RAILS_ENV: test
          command: |
            echo 'test:
              adapter: postgresql
              database: admin_goldenowl_asia_test
              username: postgres
              host: localhost
            ' > config/database.yml

      # Wait for DB
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Setup Database
      - run:
          name: Setup Database
          command: bundle exec rake db:create db:schema:load --trace

      # Setup Code Climate Test Reporter
      - run:
          name: Setup Code Climate Test Reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter

      # Run RSpec in parallel
      - run:
          name: Run RSpec in parallel
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out /tmp/test-results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
          when: always
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      # Upload coverage results to Code Climate
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter format-coverage -t simplecov $CIRCLE_ARTIFACTS/coverage/.resultset.json
            ./tmp/cc-test-reporter upload-coverage
